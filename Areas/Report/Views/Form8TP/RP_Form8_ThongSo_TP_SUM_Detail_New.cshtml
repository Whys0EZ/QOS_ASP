
@model QOS.Areas.Report.Models.Form8TPDetailViewModel
@{
    ViewData["Title"] = "Measurement Sheet";
    Layout = "";
}
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />

<style>
    .table-fixed_1 {
        border-collapse: collapse;
        width: 100%;
        font-size: 12px;
    }

    .table-fixed_1 th, .table-fixed_1 td {
        border: 1px solid black;
      
        text-align: center;

    }

    .td_title_R {
        padding: 5px;
        font-weight: bold;
    }

    .FALSE {
        background-color: #ffcccc;
        color: red;
    }

    .PASS {
        background-color: #ccffcc;
    }

    .CENTER {
        text-align: center;
    }

    .RIGHT {
        text-align: right;
    }

    .tr1 { background-color: #f9f9f9; }
    .tr2 { background-color: #ffffff; }
    .tr3 { background-color: #f0f0f0; }
    .tr4 { background-color: #e8e8e8; }

    @@media print {
        .no-print { display: none; }
    }
</style>

<div class="m-3 my-3">
    <div class="no-print mb-3">
        <button type="button" class="btn btn-primary" onclick="window.print();">
            <i class="fa-solid fa-print"></i> Print
        </button>
        <button type="button" class="btn btn-success" onclick="exportToExcel();">
            <i class="fa-solid fa-file-excel"></i> Export Excel
        </button>
        
    </div>

    <div class="text-left mb-3">
        @if (!string.IsNullOrEmpty(Model.Img))
        {
            <img src="@($"https://qos.crystal-regent.com.vn/{Model.Img}")" style="width:150px;" alt="Style Image" />
        }
        <h2 class="text-primary fw-bold text-center">MEASUREMENT SHEET</h2>
    </div>
    <div class="table-responsive mb-3">
        <table class="table table-borderless " id="mytable" >
            <tr>
                <td class="td_title_R">Customer: @Model.Customer</td>
                <td class="td_title_R">Style No.: @Model.StyleCode</td>
                <td class="td_title_R">Sample Type: @Model.Pattern</td>
                <td class="td_title_R">Colour: @Model.ColorCode</td>
            </tr>
            <tr>
                <td class="td_title_R">Season: @Model.Season</td>
                <td class="td_title_R">Board: @Model.Board</td>
                <td class="td_title_R">Dev Style Name: @Model.Dev_Style_Name</td>
                <td class="td_title_R">&nbsp;</td>
            </tr>
            <tr>
                <td class="td_title_R">Category: @Model.Category</td>
                <td class="td_title_R">&nbsp;</td>
                <td class="td_title_R">Development Size Range: @Model.Development_Size_Range</td>
                <td class="td_title_R">&nbsp;</td>
            </tr>
            <tr>
                <td class="td_title_R">Fit Intent: @Model.Fit_Intent</td>
                <td class="td_title_R">&nbsp;</td>
                <td class="td_title_R">Grade Rule Template: @Model.Grade_Rule_Template</td>
                <td class="td_title_R">&nbsp;</td>
            </tr>
        </table>
    </div>

    <div class="" id="div_TB_Content" style="overflow:auto;">
        @{
            if (Model.MeasurementData != null && Model.MeasurementData.Any())
            {
                var firstRow = Model.MeasurementData.First();
                var sizeListStr = firstRow["SizeList"]?.ToString() ?? "";
                var clNameStr = firstRow["clName"]?.ToString() ?? "";
                
                var sizeList = string.IsNullOrEmpty(sizeListStr) ? new string[0] : sizeListStr.Split(';');
                var clNameList = string.IsNullOrEmpty(clNameStr) ? new string[0] : clNameStr.Split(';');
                
                var totalColumns = clNameList.Length;
                var hasT = clNameList.Any(x => x.EndsWith("_T"));
                var hasS = clNameList.Any(x => x.EndsWith("_S"));
                var hasH = clNameList.Any(x => x.EndsWith("_H"));
                
                var tCount = clNameList.Count(x => x.EndsWith("_T")) + 1;
                var sCount = clNameList.Count(x => x.EndsWith("_S")) + 1;
                var hCount = clNameList.Count(x => x.EndsWith("_H"));

                <table id="headerTable" class="table-fixed_1">
                    <thead class="table-d" style="background-color:darkorange;">
                        <tr class="table-info">
                            <td style=";" rowspan="2">POM</td>
                            <td rowspan="2">Point of Measurement Name</td>
                            <td style="width:80px;" rowspan="2">POM Criticality</td>
                            <td style=";" rowspan="2">Tol</td>
                            
                            @if (totalColumns == 1 && hasT)
                            {
                                <th colspan="@sCount">Before Iron</th>
                                <th colspan="@tCount">After Iron</th>
                                if (hCount > 2)
                                {
                                    <th colspan="@hCount">After Iron H</th>
                                    <td style="width:30px;" rowspan="2">Adjustment</td>
                                }
                            }
                            else
                            {
                                foreach (var size in sizeList)
                                {
                                    if (!string.IsNullOrEmpty(size))
                                    {
                                        var sizeParts = size.Split('_');
                                        if (sizeParts.Length >= 2)
                                        {
                                            var colspan = int.Parse(sizeParts[0]) + 1;
                                            <td colspan="@colspan">@sizeParts[1]</td>
                                        }
                                    }
                                }
                            }
                        </tr>
                        <tr>
                            @foreach (var clName in clNameList)
                            {
                                if (!string.IsNullOrEmpty(clName))
                                {
                                    if (clName.EndsWith("_1_S") || clName.EndsWith("_1_T"))
                                    {
                                        <td style="width:70px;">Base</td>
                                    }
                                    <td>@clName.Replace("_", ".")</td>
                                }
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var rowIndex = 1;
                            var trClass = 1;
                        }
                        @foreach (var row in Model.MeasurementData)
                        {
                            <tr class="tr@trClass">
                                <td>@row["POM"]</td>
                                <td style="text-align:left;">@row["Item_Name"]</td>
                                <td>@row["Criticality"]</td>
                                <td class="CENTER">@row["TOL"]</td>
                                
                                @foreach (var clName in clNameList)
                                {
                                    if (!string.IsNullOrEmpty(clName) && row.ContainsKey(clName))
                                    {
                                        var cellValue = row[clName]?.ToString() ?? "";
                                        var valueParts = cellValue.Split("__");
                                        
                                        if (clName.EndsWith("_1_S") || clName.EndsWith("_1_T"))
                                        {
                                            <td class="RIGHT">@(valueParts.Length > 0 ? valueParts[0] : "")</td>
                                        }
                                        
                                        if (valueParts.Length > 1)
                                        {
                                            var cellClass = valueParts.Length > 2 && valueParts[2] == "R" ? "FALSE" : "PASS";
                                            <td class="@cellClass">@valueParts[1]</td>
                                        }
                                    }
                                }
                                
                                @if (totalColumns == 1 && hasT && hCount > 2)
                                {
                                    <td></td>
                                }
                            </tr>
                            
                            rowIndex++;
                            trClass = trClass >= 4 ? 1 : trClass + 1;
                        }
                    </tbody>
                </table>
            }
            else
            {
                <div class="alert alert-warning">Không có dữ liệu</div>
            }
        }
    </div>
</div>

<script>
    function exportToExcel() {
        @* var params = new URLSearchParams(window.location.search);
        var id = params.get('ID');
        if (id) {
            window.location.href = '@Url.Action("ExportExcelDetail", "Form8TP", new { Area = "Report" })?ID=' + encodeURIComponent(id);
        } else {
            alert('Không tìm thấy ID');
        } *@
        // Lấy 2 bảng
        var titleTable = document.getElementById('mytable');
        var dataTable = document.getElementById('headerTable');

        var tab_text = "";

        // ===== 1. Thêm bảng tiêu đề (mytable)
        tab_text += "<table border='1'>";
        for (var i = 0; i < titleTable.rows.length; i++) {
            tab_text += "<tr>" + titleTable.rows[i].innerHTML + "</tr>";
        }
        tab_text += "</table><br><br>";

        // ===== 2. Thêm bảng dữ liệu (headerTable)
        tab_text += "<table border='1'>";
        for (var j = 0; j < dataTable.rows.length; j++) {
            var rowData = dataTable.rows[j].innerHTML;

            // Format chống hiểu nhầm 1/2 là ngày tháng trong Excel
            rowData = rowData.replace(/>(-?\d+\/\d+)</g, "> '$1<");

            tab_text += "<tr>" + rowData + "</tr>";
        }
        tab_text += "</table>";

        // ===== 3. Làm sạch HTML không cần thiết
        tab_text = tab_text.replace(/<a[^>]*>|<\/a>/gi, "");
        tab_text = tab_text.replace(/<img[^>]*>/gi, "");
        tab_text = tab_text.replace(/<input[^>]*>|<\/input>/gi, "");

        // ===== 4. Xuất file Excel
        var a = document.createElement('a');
        a.href = 'data:application/vnd.ms-excel,' + encodeURIComponent(tab_text);
        a.download = 'Export_Report.xls';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    }
</script>